#Optimized LSTM implementation        

# LSTMP -- LSTM function with projection and self-stabilization
# Projection is enabled by passing different values for outputDim and cellDim.
# This is the stateless version that takes the previous state as an input.
# It returns a dictionary with three members: h and c, and dim=h.dim for convenience. prevState must have h and c.
# This function also takes an optional auxiliary input, e.g. for suporting attention models.
fastLSTMP (outputDim, cellDim=outputDim, x, aux=BS.Constants.None, auxDim=aux.dim, prevState, enableSelfStabilization=false, inputDim=0) =
[
    S(x) = BS.Parameters.Stabilize (x, enabled=enableSelfStabilization)

    _ = [     // encapsulate the inner workings

        // parameter macros
        # note: each invocation comes with its own set of weights
        B() = BS.Parameters.BiasParam (4*cellDim)
        W() = BS.Parameters.WeightParam (4*cellDim, 0)               // input
        A() = BS.Parameters.WeightParam (4*cellDim, auxDim)          // aux input
        H() = BS.Parameters.WeightParam (4*cellDim, outputDim)       // hidden-to-hidden
        C() = BS.Parameters.DiagWeightParam (cellDim)              // cell-to-hiddden (note: applied elementwise)

        dh = prevState.h // previous values
        dc = prevState.c

        dhs = S(dh) // previous values, stabilized
        dcs = S(dc)
        # note: input does not get a stabilizer here, user is meant to do that outside

        # projected contribution from input(s) and bias
        proj4 = if BS.Constants.IsNone (aux)
                then B() + W() * x + H() * dhs
                else B() + W() * x + H() * dhs +  A() * aux

            itProj  = Slice (0*cellDim, 1*cellDim, proj4, axis=1)
            bitProj = Slice (1*cellDim, 2*cellDim, proj4, axis=1)
            ftProj  = Slice (2*cellDim, 3*cellDim, proj4, axis=1)
            otProj  = Slice (3*cellDim, 4*cellDim, proj4, axis=1)

        it = Sigmoid (itProj +  C() .* dcs)           // input gate(t)
        bit = it .* Tanh (bitProj)                    // applied to tanh of input network

        ft = Sigmoid (ftProj +  C() .* dcs)           // forget-me-not gate(t)
        bft = ft .* dc                                // applied to cell(t-1)

        ct = bft + bit                                // c(t) is sum of both

        ot = Sigmoid (otProj +  C() .* S(ct))         // output gate(t)
        ht = ot .* Tanh (ct)                          // applied to tanh(cell(t))
    ]

    # our return values
    c = _.ct                        // cell value
    h = if outputDim != cellDim     // output/hidden state
        then [                      // project
            Wmr = BS.Parameters.WeightParam (outputDim, cellDim);
            htp = Wmr * S(_.ht)
        ].htp
        else _.ht                   // no projection
    dim = outputDim
]

NoAuxInputHook (input, lstmState) = BS.Constants.None

# this implements a recurrent (stateful) LSTM with projection and self-stabilization
# It returns a record (h,c). To use its output, say .h
# By default, this is left-to-right. Pass previousHook=BS.RNNs.NextHC for a right-to-left model.
fastRecurrentLSTMP (outputDim/*h.dim*/, cellDim=BS.Constants.None,
                x, inputDim=0,
                previousHook=BS.RNNs.PreviousHC,
                augmentInputHook=NoAuxInputHook, augmentInputDim=0,
                layerIndex=0,
                enableSelfStabilization=false) =
[
    enableSelfStabilization1 = enableSelfStabilization ; cellDim1 = cellDim ; layerIndex1 = layerIndex # workaround

    prevState = previousHook (lstmState, layerIndex=layerIndex1) # recurrent memory. E.g. Previous or Next, with or without initial state, beam reordering etc.

    auxInput = augmentInputHook(x, prevState)   # optionally augment input. BS.Constants.None if none.

    lstmState = fastLSTMP (outputDim, cellDim=if BS.Constants.IsNone (cellDim) then outputDim else cellDim, x, inputDim=0, aux=auxInput, auxDim=augmentInputDim, prevState, enableSelfStabilization=enableSelfStabilization1)
].lstmState // that's the value we return

# a stack of recurrent LSTMs (unidirectional)
fastRecurrentLSTMPStack (layerDims, cellDims=BS.Constants.None,
                     input, inputDim=0,
                     previousHook=BS.RNNs.PreviousHC,
                     augmentInputHook=NoAuxInputHook, augmentInputDim=0,
                     enableSelfStabilization=false) =
[
    previousHook1 = previousHook ; useStabilizer = enableSelfStabilization ; augmentInputHook1 = augmentInputHook ; augmentInputDim1 = augmentInputDim
    layers[i:0..Length (layerDims)-1] =
        fastRecurrentLSTMP (layerDims[i], cellDim=if BS.Constants.IsNone (cellDims) then layerDims[i] else cellDims[i],
                        if i == 0 then input else BS.Parameters.Stabilize (layers[i-1].h, enabled=useStabilizer),
                        previousHook=previousHook1,
                        augmentInputHook=if i == 0 then augmentInputHook1 else NoAuxInputHook, augmentInputDim=if i == 0 then augmentInputDim1 else 0,
                        layerIndex=i,
                        enableSelfStabilization=useStabilizer)
].layers
